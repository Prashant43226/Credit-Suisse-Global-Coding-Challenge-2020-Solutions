#include <bits/stdc++.h>

using namespace std;
int calculateMinimumSession(int numOfBankers, int numOfParticipants, vector<vector<int>> bankersPreferences, vector<vector<int>> participantsPreferences) {
    // Participant's code will go here
    int n=numOfBankers;
    int m=numOfParticipants;
    
    int adjlist[m][n];
    
    memset(adjlist,0,sizeof(adjlist));
    int i=0;
    
    for(auto u:bankersPreferences)
    {
    for(auto v:u)
    {
    adjlist[v-1][i]=1;
    }
    i++;
    }
    
    int j=0;
    for(auto u:participantsPreferences)
    {
    for(auto v:u)
    {
    adjlist[j][v-1]=1;
    }
    j++;
    }
    
int xmax=0;
int ymax=0;

int x1;
int y1;

for(i=0;i<m;++i)
{
	x1=0;
	for(int j=0;j<n;++j)
	{
		if(adjlist[i][j]==1)
		{
			x1++;
		}
	}
	if(x1>xmax)
	xmax=x1;
}

for(int i=0;i<n;++i)
{
	y1=0;
	for(int j=0;j<m;++j)
	{
		if(adjlist[j][i]==1)
		{
			y1++;
		}
	}
	if(y1>ymax)
	ymax=y1;
}
    return max(xmax,ymax);
}

vector<string> split(const string& str, char delim) {
    vector<string> strings;
    size_t start;
    size_t end = 0;
    while ((start = str.find_first_not_of(delim, end)) != string::npos) {
        end = str.find(delim, start);
        strings.push_back(str.substr(start, end - start));
    }
    return strings;
}

vector<int> splitStringToInt(const string& str, char delim) {
    vector<int> strings;
    size_t start;
    size_t end = 0;
    while ((start = str.find_first_not_of(delim, end)) != string::npos) {
        end = str.find(delim, start);
        strings.push_back(stoi(str.substr(start, end - start)));
    }
    return strings;
}

void printVector(vector<int> vec) {
    for (vector<int>::const_iterator i = vec.begin(); i != vec.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

void printVector(vector<string> vec) {
    for (vector<string>::const_iterator i = vec.begin(); i != vec.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

int main() {
    int numOfBankers, numOfParticipants;
    vector<vector<int>> bankersPreferences, participantsPreferences;

    cin >> numOfBankers;

    string bankersPreferencesStr;
    cin >> bankersPreferencesStr;
    vector<string> bankersPreferencesVecByComma = split(bankersPreferencesStr, ',');

    for (vector<string>::const_iterator i = bankersPreferencesVecByComma.begin(); i != bankersPreferencesVecByComma.end(); ++i) {
        vector<int> bankerPreferenceVecByAnd = splitStringToInt(*i, '&');
        bankersPreferences.push_back(bankerPreferenceVecByAnd);
    }

    string participantsPreferencesStr;
    cin >> numOfParticipants;
    cin >> participantsPreferencesStr;
    vector<string> participantsPreferencesVecByComma = split(participantsPreferencesStr, ',');

    for (vector<string>::const_iterator i = participantsPreferencesVecByComma.begin(); i != participantsPreferencesVecByComma.end(); ++i) {
        vector<int> participantPreferenceVecByAnd = splitStringToInt(*i, '&');
        participantsPreferences.push_back(participantPreferenceVecByAnd);
    }

    int result = calculateMinimumSession(numOfBankers, numOfParticipants, bankersPreferences, participantsPreferences);

    // Do not remove below line
    cout << result << "\n";
    // Do not print anything after this line

    return 0;
}