#include <bits/stdc++.h>

using namespace std;

int findMaxProfit(int numOfPredictedTimes, vector<int> predictedSharePrices) {
    // Participant's code will go here
    int n=numOfPredictedTimes;
    int sum=0;
    if (n == 1) 
        return predictedSharePrices[0]; 
    int j = 0; 
    while (j < n - 1) { 
        while ((j < n - 1) && (predictedSharePrices[j + 1] <= predictedSharePrices[j])) 
            j++; 
        if (j == n - 1) 
            break; 
        int buy = j++; 
        while ((j < n) && (predictedSharePrices[j] >= predictedSharePrices[j - 1])) 
            j++; 
        int sell = j - 1; 
        sum+=predictedSharePrices[sell]- predictedSharePrices[buy];
    } 
    return sum;
}

vector<int> splitStringToInt(const string& str, char delim) {
    vector<int> strings;
    size_t start;
    size_t end = 0;
    while ((start = str.find_first_not_of(delim, end)) != string::npos) {
        end = str.find(delim, start);
        strings.push_back(stoi(str.substr(start, end - start)));
    }
    return strings;
}

void printVector(vector<int> vec) {
    for (vector<int>::const_iterator i = vec.begin(); i != vec.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

int main() {
    string firstLine;
    getline(cin, firstLine);

    vector<int> firstLineVec = splitStringToInt(firstLine, ' ');
    int numOfPredictedTimes = firstLineVec[0];
    vector<int> predictedSharePrices(firstLineVec.begin()+1, firstLineVec.end());


    int result = findMaxProfit(numOfPredictedTimes, predictedSharePrices);

    // Do not remove below line
    cout << result << "\n";
    // Do not print anything after this line

    return 0;
}