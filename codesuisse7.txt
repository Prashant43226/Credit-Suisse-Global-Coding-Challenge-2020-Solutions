#include <bits/stdc++.h>

using namespace std;

void recur(vector<vector<int>>questionAndAnswerVecOfVec,set<int>&s1)
{
	    vector<int>v;

for(int i=0;i<questionAndAnswerVecOfVec.size();++i)
    {
        	    int count=0;
    	int k=questionAndAnswerVecOfVec[i][0];
    	if(s1.find(k)==s1.end())
    	{
    		 v=questionAndAnswerVecOfVec[i];
    		for(int j=1;j<questionAndAnswerVecOfVec[i].size();++j)
    		{
    			if(s1.find(questionAndAnswerVecOfVec[i][j])!=s1.end())
    			{count++;
    			}
    		}
    		if(count>=2)
    		{
    			s1.insert(k);
    			recur(questionAndAnswerVecOfVec,s1);
    		}
    	}
    }
}
string findSuspiciousUserId(int numOfQuestions, vector<vector<int>> questionAndAnswerVecOfVec) {
    // Participant's code will go here
    
    map<int,vector<int>>mp;
    string s;
    for(int i=0;i<questionAndAnswerVecOfVec.size();++i)
    {
    	for(int j=1;j<questionAndAnswerVecOfVec[i].size();++j)
    	{
    	   mp[questionAndAnswerVecOfVec[i][j]].push_back(questionAndAnswerVecOfVec[i][0]);
    	}
    }
    
    vector<int>v;
    set<int>s1;
    
    for(int i=0;i<questionAndAnswerVecOfVec.size();++i)
    {
    if(mp.find(questionAndAnswerVecOfVec[i][0])!=mp.end())
    {
    	v=mp[questionAndAnswerVecOfVec[i][0]];
    	for(int j=0;j<questionAndAnswerVecOfVec[i].size();++j)
    	{
    		if(find(v.begin(),v.end(),questionAndAnswerVecOfVec[i][j])!=v.end())
    		{
    			s1.insert(questionAndAnswerVecOfVec[i][j]);
    		}
    	}
    }
    }
    
    int n1=s1.size();

    recur(questionAndAnswerVecOfVec,s1);
    
    for (auto it = s1.begin(); it != s1.end(); ++it)
        {
            if(it==prev(s1.end()))
            {
                s+=to_string(*it);
            }
            else
            {
            s+=to_string(*it);
        s+=',';
            }
        }
    return s;
}

vector<string> split(const string& str, char delim) {
    vector<string> strings;
    size_t start;
    size_t end = 0;
    while ((start = str.find_first_not_of(delim, end)) != string::npos) {
        end = str.find(delim, start);
        strings.push_back(str.substr(start, end - start));
    }
    return strings;
}

vector<int> splitStringToInt(const string& str, char delim) {
    vector<int> strings;
    size_t start;
    size_t end = 0;
    while ((start = str.find_first_not_of(delim, end)) != string::npos) {
        end = str.find(delim, start);
        strings.push_back(stoi(str.substr(start, end - start)));
    }
    return strings;
}

void printVector(vector<int> vec) {
    for (vector<int>::const_iterator i = vec.begin(); i != vec.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

void printVector(vector<string> vec) {
    for (vector<string>::const_iterator i = vec.begin(); i != vec.end(); ++i) {
        cout << *i << ' ';
    }
    cout << endl;
}

int main() {
    string firstLine;
    getline(cin, firstLine);

    int numOfQuestions = strtol(firstLine.c_str(), NULL, 10);;

    string questionAndAnswerStr;
    getline(cin, questionAndAnswerStr);

    vector<vector<int>> questionAndAnswerVecOfVec;
    vector<string> questionAndAnswerVecByComma = split(questionAndAnswerStr, ',');

    for (vector<string>::const_iterator i = questionAndAnswerVecByComma.begin(); i != questionAndAnswerVecByComma.end(); ++i) {
        vector<int> bankerPreferenceVecByAnd = splitStringToInt(*i, ' ');
        questionAndAnswerVecOfVec.push_back(bankerPreferenceVecByAnd);
    }

    string result = findSuspiciousUserId(numOfQuestions, questionAndAnswerVecOfVec);

    // Do not remove below line
    cout << result << "\n";
    // Do not print anything after this line

    return 0;
}